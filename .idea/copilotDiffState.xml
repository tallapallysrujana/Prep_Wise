<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/(root)/layout.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/(root)/layout.tsx" />
              <option name="originalContent" value="import React, {ReactNode} from 'react'&#10;&#10;const RootLayout = ({children}:{children:ReactNode}) =&gt; {&#10;    return (&#10;        &lt;div&gt;{children}&lt;/div&gt;&#10;    )&#10;}&#10;export default RootLayout&#10;" />
              <option name="updatedContent" value="import React, {ReactNode} from 'react'&#10;&#10;const RootLayout = ({children}:{children:ReactNode}) =&gt; {&#10;    return (&#10;        &lt;div className=&quot;pattern text-white min-h-screen&quot;&gt;{children}&lt;/div&gt;&#10;    )&#10;}&#10;export default RootLayout" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/globals.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/globals.css" />
              <option name="originalContent" value="@import &quot;tailwindcss&quot;;&#10;&#10;@plugin &quot;tailwindcss-animate&quot;;&#10;&#10;@custom-variant dark (&amp;:is(.dark *));&#10;&#10;@theme {&#10;  --color-success-100: #49de50;&#10;  --color-success-200: #42c748;&#10;  --color-destructive-100: #f75353;&#10;  --color-destructive-200: #c44141;&#10;&#10;  --color-primary-100: #dddfff;&#10;  --color-primary-200: #cac5fe;&#10;&#10;  --color-light-100: #d6e0ff;&#10;  --color-light-400: #6870a6;&#10;  --color-light-600: #4f557d;&#10;  --color-light-800: #24273a;&#10;&#10;  --color-dark-100: #020408;&#10;  --color-dark-200: #27282f;&#10;  --color-dark-300: #242633;&#10;&#10;  --font-mona-sans: &quot;Mona Sans&quot;, sans-serif;&#10;}&#10;&#10;:root {&#10;  --radius: 0.625rem;&#10;  --background: oklch(1 0 0);&#10;  --foreground: oklch(0.145 0 0);&#10;  --card: oklch(1 0 0);&#10;  --card-foreground: oklch(0.145 0 0);&#10;  --popover: oklch(1 0 0);&#10;  --popover-foreground: oklch(0.145 0 0);&#10;  --primary: oklch(0.205 0 0);&#10;  --primary-foreground: oklch(0.985 0 0);&#10;  --secondary: oklch(0.97 0 0);&#10;  --secondary-foreground: oklch(0.205 0 0);&#10;  --muted: oklch(0.97 0 0);&#10;  --muted-foreground: oklch(0.556 0 0);&#10;  --accent: oklch(0.97 0 0);&#10;  --accent-foreground: oklch(0.205 0 0);&#10;  --destructive: oklch(0.577 0.245 27.325);&#10;  --border: oklch(0.922 0 0);&#10;  --input: oklch(0.922 0 0);&#10;  --ring: oklch(0.708 0 0);&#10;  --chart-1: oklch(0.646 0.222 41.116);&#10;  --chart-2: oklch(0.6 0.118 184.704);&#10;  --chart-3: oklch(0.398 0.07 227.392);&#10;  --chart-4: oklch(0.828 0.189 84.429);&#10;  --chart-5: oklch(0.769 0.188 70.08);&#10;  --sidebar: oklch(0.985 0 0);&#10;  --sidebar-foreground: oklch(0.145 0 0);&#10;  --sidebar-primary: oklch(0.205 0 0);&#10;  --sidebar-primary-foreground: oklch(0.985 0 0);&#10;  --sidebar-accent: oklch(0.97 0 0);&#10;  --sidebar-accent-foreground: oklch(0.205 0 0);&#10;  --sidebar-border: oklch(0.922 0 0);&#10;  --sidebar-ring: oklch(0.708 0 0);&#10;}&#10;&#10;.dark {&#10;  --background: oklch(0.145 0 0);&#10;  --foreground: oklch(0.985 0 0);&#10;  --card: oklch(0.205 0 0);&#10;  --card-foreground: oklch(0.985 0 0);&#10;  --popover: oklch(0.205 0 0);&#10;  --popover-foreground: oklch(0.985 0 0);&#10;  --primary: oklch(0.922 0 0);&#10;  --primary-foreground: oklch(0.205 0 0);&#10;  --secondary: oklch(0.269 0 0);&#10;  --secondary-foreground: oklch(0.985 0 0);&#10;  --muted: oklch(0.269 0 0);&#10;  --muted-foreground: var(--light-100);&#10;  --accent: oklch(0.269 0 0);&#10;  --accent-foreground: oklch(0.985 0 0);&#10;  --destructive: oklch(0.704 0.191 22.216);&#10;  --border: oklch(1 0 0 / 10%);&#10;  --input: oklch(1 0 0 / 15%);&#10;  --ring: oklch(0.556 0 0);&#10;  --chart-1: oklch(0.488 0.243 264.376);&#10;  --chart-2: oklch(0.696 0.17 162.48);&#10;  --chart-3: oklch(0.769 0.188 70.08);&#10;  --chart-4: oklch(0.627 0.265 303.9);&#10;  --chart-5: oklch(0.645 0.246 16.439);&#10;  --sidebar: oklch(0.205 0 0);&#10;  --sidebar-foreground: oklch(0.985 0 0);&#10;  --sidebar-primary: oklch(0.488 0.243 264.376);&#10;  --sidebar-primary-foreground: oklch(0.985 0 0);&#10;  --sidebar-accent: oklch(0.269 0 0);&#10;  --sidebar-accent-foreground: oklch(0.985 0 0);&#10;  --sidebar-border: oklch(1 0 0 / 10%);&#10;  --sidebar-ring: oklch(0.556 0 0);&#10;}&#10;&#10;@theme inline {&#10;  --radius-sm: calc(var(--radius) - 4px);&#10;  --radius-md: calc(var(--radius) - 2px);&#10;  --radius-lg: var(--radius);&#10;  --radius-xl: calc(var(--radius) + 4px);&#10;  --color-background: var(--background);&#10;  --color-foreground: var(--foreground);&#10;  --color-card: var(--card);&#10;  --color-card-foreground: var(--card-foreground);&#10;  --color-popover: var(--popover);&#10;  --color-popover-foreground: var(--popover-foreground);&#10;  --color-primary: var(--primary);&#10;  --color-primary-foreground: var(--primary-foreground);&#10;  --color-secondary: var(--secondary);&#10;  --color-secondary-foreground: var(--secondary-foreground);&#10;  --color-muted: var(--muted);&#10;  --color-muted-foreground: var(--muted-foreground);&#10;  --color-accent: var(--accent);&#10;  --color-accent-foreground: var(--accent-foreground);&#10;  --color-destructive: var(--destructive);&#10;  --color-border: var(--border);&#10;  --color-input: var(--input);&#10;  --color-ring: var(--ring);&#10;  --color-chart-1: var(--chart-1);&#10;  --color-chart-2: var(--chart-2);&#10;  --color-chart-3: var(--chart-3);&#10;  --color-chart-4: var(--chart-4);&#10;  --color-chart-5: var(--chart-5);&#10;  --color-sidebar: var(--sidebar);&#10;  --color-sidebar-foreground: var(--sidebar-foreground);&#10;  --color-sidebar-primary: var(--sidebar-primary);&#10;  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);&#10;  --color-sidebar-accent: var(--sidebar-accent);&#10;  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);&#10;  --color-sidebar-border: var(--sidebar-border);&#10;  --color-sidebar-ring: var(--sidebar-ring);&#10;}&#10;&#10;@layer base {&#10;  * {&#10;    @apply border-border outline-ring/50;&#10;  }&#10;  body {&#10;    @apply text-foreground;&#10;  }&#10;  p {&#10;    @apply text-light-100;&#10;  }&#10;  h2 {&#10;    @apply text-3xl font-semibold;&#10;  }&#10;  h3 {&#10;    @apply text-2xl font-semibold;&#10;  }&#10;  ul {&#10;    @apply list-disc list-inside;&#10;  }&#10;  li {&#10;    @apply text-light-100;&#10;  }&#10;}&#10;&#10;@layer components {&#10;  .btn-call {&#10;    @apply inline-block px-7 py-3 font-bold text-sm leading-5 text-white transition-colors duration-150 bg-success-100 border border-transparent rounded-full shadow-sm focus:outline-none focus:shadow-2xl active:bg-success-200 hover:bg-success-200 min-w-28 cursor-pointer items-center justify-center overflow-visible;&#10;&#10;    .span {&#10;      @apply bg-success-100 h-[85%] w-[65%];&#10;    }&#10;  }&#10;&#10;  .btn-disconnect {&#10;    @apply inline-block px-7 py-3 text-sm font-bold leading-5 text-white transition-colors duration-150 bg-destructive-100 border border-transparent rounded-full shadow-sm focus:outline-none focus:shadow-2xl active:bg-destructive-200 hover:bg-destructive-200 min-w-28;&#10;  }&#10;&#10;  .btn-upload {&#10;    @apply flex min-h-14 w-full items-center justify-center gap-1.5 rounded-md;&#10;  }&#10;  .btn-primary {&#10;    @apply w-fit !bg-primary-200 !text-dark-100 hover:!bg-primary-200/80 !rounded-full !font-bold px-5 cursor-pointer min-h-10;&#10;  }&#10;  .btn-secondary {&#10;    @apply w-fit !bg-dark-200 !text-primary-200 hover:!bg-dark-200/80 !rounded-full !font-bold px-5 cursor-pointer min-h-10;&#10;  }&#10;&#10;  .btn-upload {&#10;    @apply bg-dark-200 rounded-full min-h-12 px-5 cursor-pointer border border-input  overflow-hidden;&#10;  }&#10;&#10;  .card-border {&#10;    @apply border-gradient p-0.5 rounded-2xl w-fit;&#10;  }&#10;&#10;  .card {&#10;    @apply dark-gradient rounded-2xl min-h-full;&#10;  }&#10;&#10;  .form {&#10;    @apply w-full;&#10;&#10;    .label {&#10;      @apply !text-light-100 !font-normal;&#10;    }&#10;&#10;    .input {&#10;      @apply !bg-dark-200 !rounded-full !min-h-12 !px-5 placeholder:!text-light-100;&#10;    }&#10;&#10;    .btn {&#10;      @apply !w-full !bg-primary-200 !text-dark-100 hover:!bg-primary-200/80 !rounded-full !min-h-10 !font-bold !px-5 cursor-pointer;&#10;    }&#10;  }&#10;&#10;  .call-view {&#10;    @apply flex sm:flex-row flex-col gap-10 items-center justify-between w-full;&#10;&#10;    h3 {&#10;      @apply text-center text-primary-100 mt-5;&#10;    }&#10;&#10;    .card-interviewer {&#10;      @apply flex-center flex-col gap-2 p-7 h-[400px] blue-gradient-dark rounded-lg border-2 border-primary-200/50 flex-1 sm:basis-1/2 w-full;&#10;    }&#10;&#10;    .avatar {&#10;      @apply z-10 flex items-center justify-center blue-gradient rounded-full size-[120px] relative;&#10;&#10;      .animate-speak {&#10;        @apply absolute inline-flex size-5/6 animate-ping rounded-full bg-primary-200 opacity-75;&#10;      }&#10;    }&#10;&#10;    .card-border {&#10;      @apply border-gradient p-0.5 rounded-2xl flex-1 sm:basis-1/2 w-full h-[400px] max-md:hidden;&#10;    }&#10;&#10;    .card-content {&#10;      @apply flex flex-col gap-2 justify-center items-center p-7 dark-gradient rounded-2xl min-h-full;&#10;    }&#10;  }&#10;&#10;  .transcript-border {&#10;    @apply border-gradient p-0.5 rounded-2xl w-full;&#10;&#10;    .transcript {&#10;      @apply dark-gradient rounded-2xl  min-h-12 px-5 py-3 flex items-center justify-center;&#10;&#10;      p {&#10;        @apply text-lg text-center text-white;&#10;      }&#10;    }&#10;  }&#10;&#10;  .section-feedback {&#10;    @apply flex flex-col gap-8 max-w-5xl mx-auto max-sm:px-4 text-lg leading-7;&#10;&#10;    .buttons {&#10;      @apply flex w-full justify-evenly gap-4 max-sm:flex-col max-sm:items-center;&#10;    }&#10;  }&#10;&#10;  .auth-layout {&#10;    @apply flex items-center justify-center mx-auto max-w-7xl min-h-screen max-sm:px-4 max-sm:py-8;&#10;  }&#10;&#10;  .root-layout {&#10;    @apply flex mx-auto max-w-7xl flex-col gap-12 my-12 px-16 max-sm:px-4 max-sm:my-8;&#10;  }&#10;&#10;  .card-cta {&#10;    @apply flex flex-row blue-gradient-dark rounded-3xl px-16 py-6 items-center justify-between max-sm:px-4;&#10;  }&#10;&#10;  .interviews-section {&#10;    @apply flex flex-wrap gap-4 max-lg:flex-col w-full items-stretch;&#10;  }&#10;&#10;  .interview-text {&#10;    @apply text-lg text-center text-white;&#10;  }&#10;&#10;  .progress {&#10;    @apply h-1.5 text-[5px] font-bold bg-primary-200 rounded-full flex-center;&#10;  }&#10;&#10;  .tech-tooltip {&#10;    @apply absolute bottom-full mb-1 hidden group-hover:flex px-2 py-1 text-xs text-white bg-gray-700 rounded-md shadow-md;&#10;  }&#10;&#10;  .card-interview {&#10;    @apply dark-gradient rounded-2xl min-h-full flex flex-col p-6 relative overflow-hidden gap-10 justify-between;&#10;&#10;    .badge-text {&#10;      @apply text-sm font-semibold capitalize;&#10;    }&#10;  }&#10;&#10;  .pattern {&#10;    background-color: #181926 !important;&#10;    background-image: url('/pattern.png');&#10;    background-repeat: no-repeat;&#10;    background-position: top;&#10;    background-size: cover;&#10;    color: #f3f4f6 !important;&#10;  }&#10;&#10;  .pattern *, .pattern :where(*) {&#10;    color: #f3f4f6 !important;&#10;    border-color: #f3f4f6;&#10;  }&#10;}&#10;&#10;@utility dark-gradient {&#10;  @apply bg-gradient-to-b from-[#1A1C20] to-[#08090D];&#10;}&#10;&#10;@utility border-gradient {&#10;  @apply bg-gradient-to-b from-[#4B4D4F] to-[#4B4D4F33];&#10;}&#10;&#10;@utility pattern {&#10;  @apply bg-[url('/pattern.png')] bg-top bg-no-repeat;&#10;}&#10;&#10;@utility blue-gradient-dark {&#10;  @apply bg-gradient-to-b from-[#171532] to-[#08090D];&#10;}&#10;&#10;@utility blue-gradient {&#10;  @apply bg-gradient-to-l from-[#FFFFFF] to-[#CAC5FE];&#10;}&#10;&#10;@utility flex-center {&#10;  @apply flex items-center justify-center;&#10;}&#10;&#10;@utility animate-fadeIn {&#10;  animation: fadeIn 0.3s ease-in-out;&#10;}&#10;&#10;@keyframes fadeIn {&#10;  from {&#10;    opacity: 0;&#10;    transform: translateY(5px);&#10;  }&#10;  to {&#10;    opacity: 1;&#10;    transform: translateY(0);&#10;  }&#10;}" />
              <option name="updatedContent" value="@import &quot;tailwindcss&quot;;&#10;&#10;@plugin &quot;tailwindcss-animate&quot;;&#10;&#10;@custom-variant dark (&amp;:is(.dark *));&#10;&#10;@theme {&#10;  --color-success-100: #49de50;&#10;  --color-success-200: #42c748;&#10;  --color-destructive-100: #f75353;&#10;  --color-destructive-200: #c44141;&#10;&#10;  --color-primary-100: #dddfff;&#10;  --color-primary-200: #cac5fe;&#10;&#10;  --color-light-100: #d6e0ff;&#10;  --color-light-400: #6870a6;&#10;  --color-light-600: #4f557d;&#10;  --color-light-800: #24273a;&#10;&#10;  --color-dark-100: #020408;&#10;  --color-dark-200: #27282f;&#10;  --color-dark-300: #242633;&#10;&#10;  --font-mona-sans: &quot;Mona Sans&quot;, sans-serif;&#10;}&#10;&#10;:root {&#10;  --radius: 0.625rem;&#10;  --background: oklch(1 0 0);&#10;  --foreground: oklch(0.145 0 0);&#10;  --card: oklch(1 0 0);&#10;  --card-foreground: oklch(0.145 0 0);&#10;  --popover: oklch(1 0 0);&#10;  --popover-foreground: oklch(0.145 0 0);&#10;  --primary: oklch(0.205 0 0);&#10;  --primary-foreground: oklch(0.985 0 0);&#10;  --secondary: oklch(0.97 0 0);&#10;  --secondary-foreground: oklch(0.205 0 0);&#10;  --muted: oklch(0.97 0 0);&#10;  --muted-foreground: oklch(0.556 0 0);&#10;  --accent: oklch(0.97 0 0);&#10;  --accent-foreground: oklch(0.205 0 0);&#10;  --destructive: oklch(0.577 0.245 27.325);&#10;  --border: oklch(0.922 0 0);&#10;  --input: oklch(0.922 0 0);&#10;  --ring: oklch(0.708 0 0);&#10;  --chart-1: oklch(0.646 0.222 41.116);&#10;  --chart-2: oklch(0.6 0.118 184.704);&#10;  --chart-3: oklch(0.398 0.07 227.392);&#10;  --chart-4: oklch(0.828 0.189 84.429);&#10;  --chart-5: oklch(0.769 0.188 70.08);&#10;  --sidebar: oklch(0.985 0 0);&#10;  --sidebar-foreground: oklch(0.145 0 0);&#10;  --sidebar-primary: oklch(0.205 0 0);&#10;  --sidebar-primary-foreground: oklch(0.985 0 0);&#10;  --sidebar-accent: oklch(0.97 0 0);&#10;  --sidebar-accent-foreground: oklch(0.205 0 0);&#10;  --sidebar-border: oklch(0.922 0 0);&#10;  --sidebar-ring: oklch(0.708 0 0);&#10;}&#10;&#10;.dark {&#10;  --background: oklch(0.145 0 0);&#10;  --foreground: oklch(0.985 0 0);&#10;  --card: oklch(0.205 0 0);&#10;  --card-foreground: oklch(0.985 0 0);&#10;  --popover: oklch(0.205 0 0);&#10;  --popover-foreground: oklch(0.985 0 0);&#10;  --primary: oklch(0.922 0 0);&#10;  --primary-foreground: oklch(0.205 0 0);&#10;  --secondary: oklch(0.269 0 0);&#10;  --secondary-foreground: oklch(0.985 0 0);&#10;  --muted: oklch(0.269 0 0);&#10;  --muted-foreground: var(--light-100);&#10;  --accent: oklch(0.269 0 0);&#10;  --accent-foreground: oklch(0.985 0 0);&#10;  --destructive: oklch(0.704 0.191 22.216);&#10;  --border: oklch(1 0 0 / 10%);&#10;  --input: oklch(1 0 0 / 15%);&#10;  --ring: oklch(0.556 0 0);&#10;  --chart-1: oklch(0.488 0.243 264.376);&#10;  --chart-2: oklch(0.696 0.17 162.48);&#10;  --chart-3: oklch(0.769 0.188 70.08);&#10;  --chart-4: oklch(0.627 0.265 303.9);&#10;  --chart-5: oklch(0.645 0.246 16.439);&#10;  --sidebar: oklch(0.205 0 0);&#10;  --sidebar-foreground: oklch(0.985 0 0);&#10;  --sidebar-primary: oklch(0.488 0.243 264.376);&#10;  --sidebar-primary-foreground: oklch(0.985 0 0);&#10;  --sidebar-accent: oklch(0.269 0 0);&#10;  --sidebar-accent-foreground: oklch(0.985 0 0);&#10;  --sidebar-border: oklch(1 0 0 / 10%);&#10;  --sidebar-ring: oklch(0.556 0 0);&#10;}&#10;&#10;@theme inline {&#10;  --radius-sm: calc(var(--radius) - 4px);&#10;  --radius-md: calc(var(--radius) - 2px);&#10;  --radius-lg: var(--radius);&#10;  --radius-xl: calc(var(--radius) + 4px);&#10;  --color-background: var(--background);&#10;  --color-foreground: var(--foreground);&#10;  --color-card: var(--card);&#10;  --color-card-foreground: var(--card-foreground);&#10;  --color-popover: var(--popover);&#10;  --color-popover-foreground: var(--popover-foreground);&#10;  --color-primary: var(--primary);&#10;  --color-primary-foreground: var(--primary-foreground);&#10;  --color-secondary: var(--secondary);&#10;  --color-secondary-foreground: var(--secondary-foreground);&#10;  --color-muted: var(--muted);&#10;  --color-muted-foreground: var(--muted-foreground);&#10;  --color-accent: var(--accent);&#10;  --color-accent-foreground: var(--accent-foreground);&#10;  --color-destructive: var(--destructive);&#10;  --color-border: var(--border);&#10;  --color-input: var(--input);&#10;  --color-ring: var(--ring);&#10;  --color-chart-1: var(--chart-1);&#10;  --color-chart-2: var(--chart-2);&#10;  --color-chart-3: var(--chart-3);&#10;  --color-chart-4: var(--chart-4);&#10;  --color-chart-5: var(--chart-5);&#10;  --color-sidebar: var(--sidebar);&#10;  --color-sidebar-foreground: var(--sidebar-foreground);&#10;  --color-sidebar-primary: var(--sidebar-primary);&#10;  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);&#10;  --color-sidebar-accent: var(--sidebar-accent);&#10;  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);&#10;  --color-sidebar-border: var(--sidebar-border);&#10;  --color-sidebar-ring: var(--sidebar-ring);&#10;}&#10;&#10;@layer base {&#10;  * {&#10;    @apply border-border outline-ring/50;&#10;  }&#10;  body {&#10;    @apply text-foreground;&#10;  }&#10;  p {&#10;    @apply text-light-100;&#10;  }&#10;  h2 {&#10;    @apply text-3xl font-semibold;&#10;  }&#10;  h3 {&#10;    @apply text-2xl font-semibold;&#10;  }&#10;  ul {&#10;    @apply list-disc list-inside;&#10;  }&#10;  li {&#10;    @apply text-light-100;&#10;  }&#10;}&#10;&#10;@layer components {&#10;  .btn-call {&#10;    @apply inline-block px-7 py-3 font-bold text-sm leading-5 text-white transition-colors duration-150 bg-success-100 border border-transparent rounded-full shadow-sm focus:outline-none focus:shadow-2xl active:bg-success-200 hover:bg-success-200 min-w-28 cursor-pointer items-center justify-center overflow-visible;&#10;&#10;    .span {&#10;      @apply bg-success-100 h-[85%] w-[65%];&#10;    }&#10;  }&#10;&#10;  .btn-disconnect {&#10;    @apply inline-block px-7 py-3 text-sm font-bold leading-5 text-white transition-colors duration-150 bg-destructive-100 border border-transparent rounded-full shadow-sm focus:outline-none focus:shadow-2xl active:bg-destructive-200 hover:bg-destructive-200 min-w-28;&#10;  }&#10;&#10;  .btn-upload {&#10;    @apply flex min-h-14 w-full items-center justify-center gap-1.5 rounded-md;&#10;  }&#10;  .btn-primary {&#10;    @apply w-fit !bg-primary-200 !text-dark-100 hover:!bg-primary-200/80 !rounded-full !font-bold px-5 cursor-pointer min-h-10;&#10;  }&#10;  .btn-secondary {&#10;    @apply w-fit !bg-dark-200 !text-primary-200 hover:!bg-dark-200/80 !rounded-full !font-bold px-5 cursor-pointer min-h-10;&#10;  }&#10;&#10;  .btn-upload {&#10;    @apply bg-dark-200 rounded-full min-h-12 px-5 cursor-pointer border border-input  overflow-hidden;&#10;  }&#10;&#10;  .card-border {&#10;    @apply border-gradient p-0.5 rounded-2xl w-fit;&#10;  }&#10;&#10;  .card {&#10;    @apply dark-gradient rounded-2xl min-h-full;&#10;  }&#10;&#10;  .form {&#10;    @apply w-full;&#10;&#10;    .label {&#10;      @apply !text-light-100 !font-normal;&#10;    }&#10;&#10;    .input {&#10;      @apply !bg-dark-200 !rounded-full !min-h-12 !px-5 placeholder:!text-light-100;&#10;    }&#10;&#10;    .btn {&#10;      @apply !w-full !bg-primary-200 !text-dark-100 hover:!bg-primary-200/80 !rounded-full !min-h-10 !font-bold !px-5 cursor-pointer;&#10;    }&#10;  }&#10;&#10;  .call-view {&#10;    @apply flex sm:flex-row flex-col gap-10 items-center justify-between w-full;&#10;&#10;    h3 {&#10;      @apply text-center text-primary-100 mt-5;&#10;    }&#10;&#10;    .card-interviewer {&#10;      @apply flex-center flex-col gap-2 p-7 h-[400px] blue-gradient-dark rounded-lg border-2 border-primary-200/50 flex-1 sm:basis-1/2 w-full;&#10;    }&#10;&#10;    .avatar {&#10;      @apply z-10 flex items-center justify-center blue-gradient rounded-full size-[120px] relative;&#10;&#10;      .animate-speak {&#10;        @apply absolute inline-flex size-5/6 animate-ping rounded-full bg-primary-200 opacity-75;&#10;      }&#10;    }&#10;&#10;    .card-border {&#10;      @apply border-gradient p-0.5 rounded-2xl flex-1 sm:basis-1/2 w-full h-[400px] max-md:hidden;&#10;    }&#10;&#10;    .card-content {&#10;      @apply flex flex-col gap-2 justify-center items-center p-7 dark-gradient rounded-2xl min-h-full;&#10;    }&#10;  }&#10;&#10;  .transcript-border {&#10;    @apply border-gradient p-0.5 rounded-2xl w-full;&#10;&#10;    .transcript {&#10;      @apply dark-gradient rounded-2xl  min-h-12 px-5 py-3 flex items-center justify-center;&#10;&#10;      p {&#10;        @apply text-lg text-center text-white;&#10;      }&#10;    }&#10;  }&#10;&#10;  .section-feedback {&#10;    @apply flex flex-col gap-8 max-w-5xl mx-auto max-sm:px-4 text-lg leading-7;&#10;&#10;    .buttons {&#10;      @apply flex w-full justify-evenly gap-4 max-sm:flex-col max-sm:items-center;&#10;    }&#10;  }&#10;&#10;  .auth-layout {&#10;    @apply flex items-center justify-center mx-auto max-w-7xl min-h-screen max-sm:px-4 max-sm:py-8;&#10;  }&#10;&#10;  .root-layout {&#10;    @apply flex mx-auto max-w-7xl flex-col gap-12 my-12 px-16 max-sm:px-4 max-sm:my-8;&#10;  }&#10;&#10;  .card-cta {&#10;    @apply flex flex-row blue-gradient-dark rounded-3xl px-16 py-6 items-center justify-between max-sm:px-4;&#10;  }&#10;&#10;  .interviews-section {&#10;    @apply flex flex-wrap gap-4 max-lg:flex-col w-full items-stretch;&#10;  }&#10;&#10;  .interview-text {&#10;    @apply text-lg text-center text-white;&#10;  }&#10;&#10;  .progress {&#10;    @apply h-1.5 text-[5px] font-bold bg-primary-200 rounded-full flex-center;&#10;  }&#10;&#10;  .tech-tooltip {&#10;    @apply absolute bottom-full mb-1 hidden group-hover:flex px-2 py-1 text-xs text-white bg-gray-700 rounded-md shadow-md;&#10;  }&#10;&#10;  .card-interview {&#10;    @apply dark-gradient rounded-2xl min-h-full flex flex-col p-6 relative overflow-hidden gap-10 justify-between;&#10;&#10;    .badge-text {&#10;      @apply text-sm font-semibold capitalize;&#10;    }&#10;  }&#10;&#10;  .pattern {&#10;    background-color: #181926 !important;&#10;    background-image: url('/pattern.png');&#10;    background-repeat: no-repeat;&#10;    background-position: top;&#10;    background-size: cover;&#10;    color: #f3f4f6 !important;&#10;  }&#10;&#10;  .pattern *, .pattern :where(*) {&#10;    color: #f3f4f6 !important;&#10;    border-color: #f3f4f6;&#10;  }&#10;&#10;  /* Make all text and labels bright/light */&#10;  label, .label, .text, .text-content, .form-label, .form-text, .pattern, body, html {&#10;    color: #f3f4f6 !important;&#10;  }&#10;  &#10;  /* Ensure input placeholder text is also light */&#10;  input::placeholder, textarea::placeholder {&#10;    color: #e5e7eb !important;&#10;    opacity: 1;&#10;  }&#10;}&#10;&#10;@utility dark-gradient {&#10;  @apply bg-gradient-to-b from-[#1A1C20] to-[#08090D];&#10;}&#10;&#10;@utility border-gradient {&#10;  @apply bg-gradient-to-b from-[#4B4D4F] to-[#4B4D4F33];&#10;}&#10;&#10;@utility pattern {&#10;  @apply bg-[url('/pattern.png')] bg-top bg-no-repeat;&#10;}&#10;&#10;@utility blue-gradient-dark {&#10;  @apply bg-gradient-to-b from-[#171532] to-[#08090D];&#10;}&#10;&#10;@utility blue-gradient {&#10;  @apply bg-gradient-to-l from-[#FFFFFF] to-[#CAC5FE];&#10;}&#10;&#10;@utility flex-center {&#10;  @apply flex items-center justify-center;&#10;}&#10;&#10;@utility animate-fadeIn {&#10;  animation: fadeIn 0.3s ease-in-out;&#10;}&#10;&#10;@keyframes fadeIn {&#10;  from {&#10;    opacity: 0;&#10;    transform: translateY(5px);&#10;  }&#10;  to {&#10;    opacity: 1;&#10;    transform: translateY(0);&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/AuthForm.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/AuthForm.tsx" />
              <option name="originalContent" value="&quot;use client&quot;&#10;&#10;import { z } from &quot;zod&quot;&#10;import { zodResolver } from &quot;@hookform/resolvers/zod&quot;&#10;import { useForm } from &quot;react-hook-form&quot;&#10;import Link from &quot;next/link&quot;;&#10;import Image from &quot;next/image&quot;&#10;import { toast } from &quot;sonner&quot;;&#10;import { auth } from &quot;@/firebase/client&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;&#10;&#10;&#10;&#10;import { Button } from &quot;@/components/ui/button&quot;&#10;import {&#10;    Form,&#10;    FormControl,&#10;    FormDescription,&#10;    FormField,&#10;    FormItem,&#10;    FormLabel,&#10;    FormMessage,&#10;} from &quot;@/components/ui/form&quot;&#10;import { Input } from &quot;@/components/ui/input&quot;&#10;&#10;&#10;&#10;const formSchema = z.object({&#10;    username: z.string().min(2).max(50),&#10;})&#10;const AuthForm = ({type}:{type:FormType}) =&gt; {&#10;    // 1. Define your form.&#10;    const form = useForm&lt;z.infer&lt;typeof formSchema&gt;&gt;({&#10;        resolver: zodResolver(formSchema),&#10;        defaultValues: {&#10;            username: &quot;&quot;,&#10;        },&#10;    })&#10;&#10;    // 2. Define a submit handler.&#10;    function onSubmit(values: z.infer&lt;typeof formSchema&gt;) {&#10;        // Do something with the form values.&#10;        // ✅ This will be type-safe and validated.&#10;        console.log(values)&#10;        }&#10;&#10;        const isSignIn= type === &quot;sign-in&quot;&#10;    return (&#10;        &lt;div className=&quot;card-border lg:min-w-[566px]&quot;&gt;&#10;            &lt;div className=&quot;flex flex-col gap-6 card py-14 px-10&quot;&gt;&#10;               &lt;div className=&quot;flex flex-row gap-2 justify-center&quot;&gt;&#10;                   &lt;Image src=&quot;/logo.svg&quot; alt=&quot;logo&quot; height={32} width={38} /&gt;&#10;                   &lt;h2 className=&quot;text-primary-100&quot;&gt;PrepWise&lt;/h2&gt;&#10;               &lt;/div&gt;&#10;                &lt;h3&gt;Practice job interviews with AI&lt;/h3&gt;&#10;            &lt;/div&gt;&#10;            &lt;Form {...form}&gt;&#10;                &lt;form onSubmit={form.handleSubmit(onSubmit)} className=&quot;w-full space-y-6 mt-4 form&quot;&gt;&#10;                    {!isSignIn &amp;&amp; &lt;p&gt;Name&lt;/p&gt;}&#10;                    &lt;p&gt;Email&lt;/p&gt;&#10;                    &lt;p&gt;Password&lt;/p&gt;&#10;                    &lt;Button className=&quot;btn&quot; type=&quot;submit&quot;&gt;{isSignIn ? 'Sign in' : 'Create an Account'}&lt;/Button&gt;&#10;                &lt;/form&gt;&#10;            &lt;/Form&gt;&#10;            &lt;p className=&quot;text-center&quot;&gt;&#10;                &lt;Link href={isSignIn ? '/sign-up' : '/sign-in'} className=&quot;font-bold text-user-primary ml-1&quot;&gt;&#10;                &lt;Link href={isSignIn ? '/sign-up' : '/sign-in'} className=&quot;font-bold text-primary-200 ml-1&quot;&gt;&#10;                    {isSignIn ? 'Sign up' : 'Sign in'}&#10;                &lt;/Link&gt;&#10;            &lt;/p&gt;&#10;        &lt;/div&gt;&#10;    )&#10;}&#10;export default AuthForm&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;&#10;&#10;import { z } from &quot;zod&quot;&#10;import { zodResolver } from &quot;@hookform/resolvers/zod&quot;&#10;import { useForm } from &quot;react-hook-form&quot;&#10;import Link from &quot;next/link&quot;;&#10;import Image from &quot;next/image&quot;&#10;import { toast } from &quot;sonner&quot;;&#10;import { auth } from &quot;@/firebase/client&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;&#10;&#10;&#10;&#10;import { Button } from &quot;@/components/ui/button&quot;&#10;import {&#10;    Form,&#10;    FormControl,&#10;    FormDescription,&#10;    FormField,&#10;    FormItem,&#10;    FormLabel,&#10;    FormMessage,&#10;} from &quot;@/components/ui/form&quot;&#10;import { Input } from &quot;@/components/ui/input&quot;&#10;&#10;&#10;&#10;const formSchema = z.object({&#10;    username: z.string().min(2).max(50),&#10;})&#10;const AuthForm = ({type}:{type:FormType}) =&gt; {&#10;    // 1. Define your form.&#10;    const form = useForm&lt;z.infer&lt;typeof formSchema&gt;&gt;({&#10;        resolver: zodResolver(formSchema),&#10;        defaultValues: {&#10;            username: &quot;&quot;,&#10;        },&#10;    })&#10;&#10;    // 2. Define a submit handler.&#10;    function onSubmit(values: z.infer&lt;typeof formSchema&gt;) {&#10;        // Do something with the form values.&#10;        // ✅ This will be type-safe and validated.&#10;        console.log(values)&#10;        }&#10;&#10;        const isSignIn= type === &quot;sign-in&quot;&#10;    return (&#10;        &lt;div className=&quot;card-border lg:min-w-[566px]&quot;&gt;&#10;            &lt;div className=&quot;flex flex-col gap-6 card py-14 px-10&quot;&gt;&#10;               &lt;div className=&quot;flex flex-row gap-2 justify-center&quot;&gt;&#10;                   &lt;Image src=&quot;/logo.svg&quot; alt=&quot;logo&quot; height={32} width={38} /&gt;&#10;                   &lt;h2 className=&quot;text-primary-100&quot;&gt;PrepWise&lt;/h2&gt;&#10;               &lt;/div&gt;&#10;                &lt;h3&gt;Practice job interviews with AI&lt;/h3&gt;&#10;            &lt;/div&gt;&#10;            &lt;Form {...form}&gt;&#10;                &lt;form onSubmit={form.handleSubmit(onSubmit)} className=&quot;w-full space-y-6 mt-4 form&quot;&gt;&#10;                    {!isSignIn &amp;&amp; &lt;p&gt;Name&lt;/p&gt;}&#10;                    &lt;p&gt;Email&lt;/p&gt;&#10;                    &lt;p&gt;Password&lt;/p&gt;&#10;                    &lt;Button className=&quot;btn&quot; type=&quot;submit&quot;&gt;{isSignIn ? 'Sign in' : 'Create an Account'}&lt;/Button&gt;&#10;                &lt;/form&gt;&#10;            &lt;/Form&gt;&#10;            &lt;p className=&quot;text-center&quot;&gt;&#10;                {isSignIn ? 'No account yet?' : 'Have an account already?'}&#10;                &lt;Link href={isSignIn ? '/sign-up' : '/sign-in'} className=&quot;font-bold text-primary-200 ml-1&quot;&gt;&#10;                    {isSignIn ? 'Sign up' : 'Sign in'}&#10;                &lt;/Link&gt;&#10;            &lt;/p&gt;&#10;        &lt;/div&gt;&#10;    )&#10;}&#10;export default AuthForm" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/FormField.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/FormField.tsx" />
              <option name="originalContent" value="import { Controller, Control, FieldValues, Path } from &quot;react-hook-form&quot;;&#10;import React from 'react'&#10;import {FormControl, FormDescription, FormItem, FormLabel, FormMessage} from &quot;@/components/ui/form&quot;;&#10;import {Input} from &quot;@/components/ui/input&quot;;&#10;&#10;interface FormFieldProps&lt;T extends FieldValues&gt; {&#10;    control: Control&lt;T&gt;;&#10;    name: Path&lt;T&gt;;&#10;    label: string;&#10;    placeholder?: string;&#10;    type?: 'text' | 'email' | 'password' | 'file'&#10;&#10;}&#10;&#10;const FormField = ({control, name, label, placeholder, type=&quot;text&quot;}: FormFieldProps&lt;T&gt;) =&gt; (&#10;   &lt;Controller&#10;       name={name}&#10;       control={control}&#10;       render={({field}) =&gt; (&#10;            &lt;FormItem&gt;&#10;                &lt;FormLabel className=&quot;label&quot;&gt;{label}&lt;/FormLabel&gt;&#10;                &lt;FormControl&gt;&#10;                    &lt;Input&#10;                        className=&quot;input&quot;&#10;                        placeholder={placeholder}&#10;                        type={type}&#10;                        {...field}&#10;                    /&gt;&#10;                &lt;/FormControl&gt;&#10;                &lt;FormMessage /&gt;&#10;            &lt;/FormItem&gt;&#10;        )}&#10;    /&gt;&#10;)&#10;export default FormField&#10;" />
              <option name="updatedContent" value="import { Controller, Control, FieldValues, Path } from &quot;react-hook-form&quot;;&#10;import React from 'react'&#10;import {FormControl, FormDescription, FormItem, FormLabel, FormMessage} from &quot;@/components/ui/form&quot;;&#10;import {Input} from &quot;@/components/ui/input&quot;;&#10;&#10;interface FormFieldProps&lt;T extends FieldValues&gt; {&#10;    control: Control&lt;T&gt;;&#10;    name: Path&lt;T&gt;;&#10;    label: string;&#10;    placeholder?: string;&#10;    type?: 'text' | 'email' | 'password' | 'file'&#10;&#10;}&#10;&#10;function FormField&lt;T extends FieldValues&gt;({control, name, label, placeholder, type=&quot;text&quot;}: FormFieldProps&lt;T&gt;) {&#10;    return (&#10;        &lt;Controller&#10;            name={name}&#10;            control={control}&#10;            render={({field}) =&gt; (&#10;                &lt;FormItem&gt;&#10;                    &lt;FormLabel className=&quot;label&quot;&gt;{label}&lt;/FormLabel&gt;&#10;                    &lt;FormControl&gt;&#10;                        &lt;Input&#10;                            className=&quot;input&quot;&#10;                            placeholder={placeholder}&#10;                            type={type}&#10;                            {...field}&#10;                        /&gt;&#10;                    &lt;/FormControl&gt;&#10;                    &lt;FormMessage /&gt;&#10;                &lt;/FormItem&gt;&#10;            )}&#10;        /&gt;&#10;    );&#10;}&#10;export default FormField" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>